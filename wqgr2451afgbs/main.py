import os
import sqlite3
import logging
import asyncio
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from urllib.parse import quote
import html

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = ""
ADMIN_IDS = [7039967412]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
WATA_ACCESS_TOKEN = ""
WATA_API_URL = "https://api.wata.pro/api/h2h/links"
WATA_PAYMENT_URL = "https://payment.wata.pro/pay-form"


logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()



# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('data//shop.db')
cursor = conn.cursor()



# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS accounts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        round_number INTEGER NOT NULL,
        login TEXT NOT NULL,
        password TEXT NOT NULL,
        sold INTEGER DEFAULT 0
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users_promo_codes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        promo_code TEXT NOT NULL,
        used_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, promo_code)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        payment_id TEXT UNIQUE NOT NULL,
        order_id TEXT,
        user_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        status TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS purchased_accounts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    round_number INTEGER NOT NULL,
    login TEXT NOT NULL,
    password TEXT NOT NULL,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS purchased_accounts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        account_id INTEGER NOT NULL,
        round_number INTEGER NOT NULL,
        purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (account_id) REFERENCES accounts (id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance REAL DEFAULT 0
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS round_prices (
        round_number INTEGER PRIMARY KEY,
        price REAL NOT NULL
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS promo_codes (
        code TEXT PRIMARY KEY,
        amount REAL NOT NULL,
        max_uses INTEGER NOT NULL,
        used_count INTEGER DEFAULT 0,
        expiration_date TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS round_images (
        round_number INTEGER PRIMARY KEY,
        image_path TEXT
    )
    ''')
    
    conn.commit()

create_tables()

# –ú–æ–¥–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AddAccounts(StatesGroup):
    round_number = State()
    accounts_text = State()

class DatabaseStates(StatesGroup):
    waiting_for_backup = State()

class AddPromo(StatesGroup):
    code = State()
    amount = State()
    max_uses = State()
    duration_days = State()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
class PaymentStates(StatesGroup):
    waiting_for_amount = State()

class TopUpStates(StatesGroup):
    waiting_for_amount = State()

class DatabaseStates(StatesGroup):
    waiting_for_backup = State()

class SetPrice(StatesGroup):
    round_number = State()
    price = State()

class SetImage(StatesGroup):
    round_number = State()
    image = State()

class UsePromo(StatesGroup):
    code = State()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()




# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(user_id: int = None):
    builder = InlineKeyboardBuilder()
    builder.button(text="üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—É–Ω–¥—ã", callback_data="show_rounds")
    builder.button(text="üí∞ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.button(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="use_promo")
    builder.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")
    
    if user_id and user_id in ADMIN_IDS:
        builder.button(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    
    builder.adjust(1)
    return builder.as_markup()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_panel():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="add_accounts")
    builder.button(text="üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promo")
    builder.button(text="üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data="set_price")
    builder.button(text="üñº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="set_image")
    builder.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_topup")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    builder.button(text="üíæ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î", callback_data="export_db")
    builder.button(text="üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ë–î", callback_data="restore_db")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(2)
    return builder.as_markup()

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Twitch Drops!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await main_menu(message.from_user.id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=await main_menu(callback.from_user.id)
    )
    await callback.answer()

@dp.callback_query(F.data == "show_rounds")
async def show_rounds_handler(callback: types.CallbackQuery):
    await show_rounds(callback.message, edit=True)
    await callback.answer()

@dp.message(Command("restore_db"))
async def restore_db_command(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer(
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (shop.db) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n"
        "–¢–µ–∫—É—â–∞—è –ë–î –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —ç—Ç–∏–º."
    )
    await state.set_state(DatabaseStates.waiting_for_backup)



@dp.callback_query(F.data == "custom_amount")
async def custom_amount_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 25 RUB):")
    await state.set_state(PaymentStates.waiting_for_amount)
    await callback.answer()

@dp.message(PaymentStates.waiting_for_amount)
async def process_custom_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 25:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 25 RUB")
            return
        
        user_id = message.from_user.id
        message_text = (
            f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ Rust Tools\n\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–°—É–º–º–∞: {amount} RUB"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount}\nTelegram id: `{user_id}`"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è URL
        encoded_text = quote(message_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º deep link
        deeplink = f"https://t.me/RustTools_help?text={encoded_text}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=f"üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount} RUB",
                url=deeplink
            )
        ]])
        
        await message.answer(
            f"üîπ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} RUB:\n\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount} RUB'\n"
            f"2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'\n"
            f"3. –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ {amount} RUB\n"
            f"4. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
            f"–í–∞—à ID: <code>{user_id}</code>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):")



@dp.message(DatabaseStates.waiting_for_backup, F.document)
async def process_db_restore(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    if not message.document.file_name or not message.document.file_name.endswith('.db'):
        return await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .db")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = f"temp_restore_{message.document.file_name}"
        await bot.download(message.document, destination=temp_path)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        success = await restore_database(temp_path, message.from_user.id)
        
        if success:
            await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()
        if os.path.exists(temp_path):
            os.remove(temp_path)



@dp.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    balance = balance[0] if balance else 0
    
    cursor.execute('''
    SELECT round_number, login, password, purchase_date 
    FROM purchased_accounts 
    WHERE user_id = ?
    ORDER BY purchase_date DESC
    ''', (user_id,))
    accounts = cursor.fetchall()
    
    text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
    text += "üõí –ö—É–ø–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
    
    if accounts:
        for acc in accounts:
            text += f"\n–†–∞—É–Ω–¥ {acc[0]}: {acc[1]}:{acc[2]}\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {acc[3]}\n"
    else:
        text += "\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "use_promo")
async def use_promo_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(UsePromo.code)
    await callback.answer()

@dp.callback_query(F.data == "admin_panel")
async def admin_panel_handler(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel()
    )
    await callback.answer()

@dp.callback_query(F.data == "add_accounts")
async def add_accounts_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞:")
    await state.set_state(AddAccounts.round_number)
    await callback.answer()

@dp.callback_query(F.data == "add_promo")
async def add_promo_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(AddPromo.code)
    await callback.answer()

@dp.callback_query(F.data == "set_price")
async def set_price_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞:")
    await state.set_state(SetPrice.round_number)
    await callback.answer()

@dp.callback_query(F.data == "set_image")
async def set_image_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞:")
    await state.set_state(SetImage.round_number)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "admin_topup")
async def admin_topup_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:",
    )
    await state.set_state(AdminStates.waiting_for_user_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        await state.set_state(AdminStates.waiting_for_amount)
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.message(AdminStates.waiting_for_amount)
async def process_admin_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        data = await state.get_data()
        user_id = data['user_id']
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)",
            (user_id,)
        )
        cursor.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
            (amount, user_id)
        )
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await bot.send_message(
                user_id,
                f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} RUB\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} RUB"
            )
        except:
            pass
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def get_user_balance(user_id: int) -> float:
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    return balance[0] if balance else 0

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "admin_panel")
async def admin_panel_handler(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel()
    )
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(AddAccounts.round_number)
async def process_round_number(message: types.Message, state: FSMContext):
    try:
        round_number = int(message.text)
        await state.update_data(round_number=round_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ login:password, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")
        await state.set_state(AddAccounts.accounts_text)
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(AddAccounts.accounts_text)
async def process_accounts_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    round_number = data['round_number']
    accounts = message.text.split('\n')
    
    added = 0
    for acc in accounts:
        if ':' in acc:
            login, password = acc.split(':', 1)
            cursor.execute(
                "INSERT INTO accounts (round_number, login, password) VALUES (?, ?, ?)",
                (round_number, login.strip(), password.strip())
            )
            added += 1
    
    conn.commit()
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—É–Ω–¥–∞ {round_number}.")
    await state.clear()

@dp.message(AddPromo.code)
async def process_promo_code(message: types.Message, state: FSMContext):
    code = message.text.upper()
    cursor.execute("SELECT code FROM promo_codes WHERE code = ?", (code,))
    if cursor.fetchone():
        await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    await state.update_data(code=code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–∞:")
    await state.set_state(AddPromo.amount)

@dp.message(AddPromo.duration_days)
async def process_promo_duration(message: types.Message, state: FSMContext):
    try:
        duration_days = int(message.text)
        if duration_days <= 0:
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        expiration_date = (datetime.now() + timedelta(days=duration_days)).strftime("%Y-%m-%d %H:%M:%S")
        await state.update_data(expiration_date=expiration_date)
        
        data = await state.get_data()
        cursor.execute(
            "INSERT INTO promo_codes (code, amount, max_uses, expiration_date) VALUES (?, ?, ?, ?)",
            (data['code'], data['amount'], data['max_uses'], data['expiration_date'])
        )
        conn.commit()
        
        await message.answer(
            f"üéü –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üîë –ö–æ–¥: {data['code']}\n"
            f"üí∞ –°—É–º–º–∞: {data['amount']} RUB\n"
            f"üîÑ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {data['max_uses']}\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç {duration_days} –¥–Ω–µ–π (–¥–æ: {data['expiration_date']})"
        )
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
        return

@dp.callback_query(F.data == "check_balance")
async def check_balance(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    balance = balance[0] if balance else 0
    await callback.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB", show_alert=True)

@dp.message(AddPromo.amount)
async def process_promo_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:")
        await state.set_state(AddPromo.max_uses)
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message(AddPromo.max_uses)
async def process_promo_max_uses(message: types.Message, state: FSMContext):
    try:
        max_uses = int(message.text)
        if max_uses <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        await state.update_data(max_uses=max_uses)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="1 –¥–µ–Ω—å", callback_data="duration_1")
        builder.button(text="7 –¥–Ω–µ–π", callback_data="duration_7")
        builder.button(text="30 –¥–Ω–µ–π", callback_data="duration_30")
        builder.button(text="–î—Ä—É–≥–æ–π —Å—Ä–æ–∫", callback_data="duration_custom")
        builder.adjust(2)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
            reply_markup=builder.as_markup()
        )
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

@dp.callback_query(F.data == "topup")
async def start_topup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 1):")
    await state.set_state(TopUpStates.waiting_for_amount)
    await callback.answer()

@dp.message(TopUpStates.waiting_for_amount)
async def process_topup_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 1 or amount > 1000000:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        payment_url, payment_id, order_id = await create_wata_payment(message.from_user.id, amount)

        if not payment_url:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpay_{payment_id}")]
        ])

        await message.answer(
            f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} RUB\n\n"
            f"üîó Paymentlink ID: <code>{payment_id}</code>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    finally:
        await state.clear()

async def create_wata_payment(user_id: int, amount: float):
    order_id = f"{user_id}_{int(datetime.now().timestamp())}"
    headers = {
        "Authorization": f"Bearer {WATA_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "amount": amount,
        "currency": "RUB",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        "orderId": order_id,
        "successRedirectUrl": "https://t.me/RustTools_bot",
        "failRedirectUrl": "https://t.me/RustTools_bot"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(WATA_API_URL, headers=headers, json=payload) as resp:
            data = await resp.json()
            if "id" in data and "url" in data:
                cursor.execute("""
                    INSERT INTO payments (payment_id, user_id, amount, status, order_id)
                    VALUES (?, ?, ?, ?, ?)
                """, (data["id"], user_id, amount, "pending", order_id))
                conn.commit()
                return data["url"], data["id"], order_id
            return None, None, None

@dp.callback_query(F.data.startswith("checkpay_"))
async def check_payment(callback: types.CallbackQuery):
    payment_id = callback.data.split("_")[1]
    headers = {"Authorization": f"Bearer {WATA_ACCESS_TOKEN}"}

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    cursor.execute("SELECT user_id, amount, status FROM payments WHERE payment_id = ?", (payment_id,))
    row = cursor.fetchone()
    if not row:
        await callback.message.edit_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    user_id, amount, old_status = row

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Å—ã–ª–∫–∏
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.wata.pro/api/h2h/links/{payment_id}", headers=headers) as resp:
            if resp.status != 200:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ({resp.status})", show_alert=True)
                return
            data = await resp.json()

    status = data.get("status", "")
    if status in ["Paid", "Closed"]:
        if old_status != "paid":
            cursor.execute("UPDATE payments SET status = 'paid' WHERE payment_id = ?", (payment_id,))
            cursor.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)", (user_id,))
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
            conn.commit()
        await callback.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB.")

    elif status == "Opened":
        await callback.answer("‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
    elif status == "Expired":
        await callback.message.edit_text("‚ùå –ü–ª–∞—Ç—ë–∂ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await callback.message.edit_text(f"‚ùó –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
@dp.callback_query(F.data.startswith("duration_"))
async def process_duration_choice(callback: types.CallbackQuery, state: FSMContext):
    duration = callback.data.split("_")[1]
    
    if duration == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
        await state.set_state(AddPromo.duration_days)
    else:
        try:
            duration_days = int(duration)
            expiration_date = (datetime.now() + timedelta(days=duration_days)).strftime("%Y-%m-%d %H:%M:%S")
            await state.update_data(expiration_date=expiration_date)
            
            data = await state.get_data()
            cursor.execute(
                "INSERT INTO promo_codes (code, amount, max_uses, expiration_date) VALUES (?, ?, ?, ?)",
                (data['code'], data['amount'], data['max_uses'], data['expiration_date'])
            )
            conn.commit()
            
            await callback.message.answer(
                f"üéü –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üîë –ö–æ–¥: {data['code']}\n"
                f"üí∞ –°—É–º–º–∞: {data['amount']} RUB\n"
                f"üîÑ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {data['max_uses']}\n"
                f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç {duration_days} –¥–Ω–µ–π (–¥–æ: {data['expiration_date']})"
            )
            await state.clear()
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
    
    await callback.answer()
@dp.message(SetPrice.round_number)
async def process_set_price_round(message: types.Message, state: FSMContext):
    try:
        round_number = int(message.text)
        await state.update_data(round_number=round_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞:")
        await state.set_state(SetPrice.price)
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(SetPrice.price)
async def process_set_price_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        data = await state.get_data()
        round_number = data['round_number']
        
        cursor.execute(
            "INSERT OR REPLACE INTO round_prices (round_number, price) VALUES (?, ?)",
            (round_number, price)
        )
        conn.commit()
        
        await message.answer(f"–¶–µ–Ω–∞ –¥–ª—è —Ä–∞—É–Ω–¥–∞ {round_number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} RUB")
        await state.clear()
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(SetImage.round_number)
async def process_set_image_round(message: types.Message, state: FSMContext):
    try:
        round_number = int(message.text)
        await state.update_data(round_number=round_number)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞:")
        await state.set_state(SetImage.image)
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(SetImage.image, F.photo)
async def process_set_image_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    round_number = data['round_number']
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists('images'):
        os.makedirs('images')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    destination = f"images/round_{round_number}.jpg"
    await bot.download_file(file_path, destination)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –ë–î
    cursor.execute(
        "INSERT OR REPLACE INTO round_images (round_number, image_path) VALUES (?, ?)",
        (round_number, destination)
    )
    conn.commit()
    
    await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—É–Ω–¥–∞ {round_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await state.clear()

@dp.message(UsePromo.code)
async def process_use_promo(message: types.Message, state: FSMContext):
    code = message.text.upper()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    cursor.execute(
        "SELECT amount, max_uses, used_count, expiration_date FROM promo_codes WHERE code = ?",
        (code,)
    )
    promo_data = cursor.fetchone()
    
    if not promo_data:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    amount, max_uses, used_count, expiration_date = promo_data
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime
        expiration_datetime = datetime.strptime(expiration_date.split('.')[0], "%Y-%m-%d %H:%M:%S")
        
        if datetime.now() > expiration_datetime:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.")
            await state.clear()
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    if used_count >= max_uses:
        await message.answer("‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    cursor.execute(
        "SELECT 1 FROM users_promo_codes WHERE user_id = ? AND promo_code = ?",
        (user_id, code)
    )
    if cursor.fetchone():
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    cursor.execute(
        "INSERT INTO users_promo_codes (user_id, promo_code) VALUES (?, ?)",
        (user_id, code)
    )
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)",
        (user_id,)
    )
    cursor.execute(
        "UPDATE users SET balance = balance + ? WHERE user_id = ?",
        (amount, user_id)
    )
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    cursor.execute(
        "UPDATE promo_codes SET used_count = used_count + 1 WHERE code = ?",
        (code,)
    )
    
    conn.commit()
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} RUB.")
    await state.clear()

    

# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("round_"))
async def show_round_accounts(callback: types.CallbackQuery):
    round_number = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ä–∞—É–Ω–¥–∞
    cursor.execute("SELECT price FROM round_prices WHERE round_number = ?", (round_number,))
    price_data = cursor.fetchone()
    
    if not price_data:
        await callback.answer("–¶–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", show_alert=True)
        return
    
    price = price_data[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance_data = cursor.fetchone()
    balance = balance_data[0] if balance_data else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
    cursor.execute("SELECT image_path FROM round_images WHERE round_number = ?", (round_number,))
    image_data = cursor.fetchone()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üõí –†–∞—É–Ω–¥ {round_number}\n"
    text += f"üí∞ –¶–µ–Ω–∞: {price} RUB\n"
    text += f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
    
    if balance >= price:
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç."
    else:
        text += "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    if balance >= price:
        builder.button(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{round_number}")
    
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_rounds")
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if image_data:
        photo = FSInputFile(image_data[0])
        await callback.message.answer_photo(
            photo,
            caption=text,
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()

@dp.callback_query(F.data == "back_to_rounds")
async def back_to_rounds(callback: types.CallbackQuery):
    await show_rounds(callback.message)
    await callback.answer()

@dp.callback_query(F.data.startswith("buy_"))
async def buy_account(callback: types.CallbackQuery):
    round_number = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    cursor.execute("SELECT price FROM round_prices WHERE round_number = ?", (round_number,))
    price = cursor.fetchone()[0]
    
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    balance = balance[0] if balance else 0
    
    if balance >= price:
        cursor.execute(
            "SELECT login, password FROM accounts WHERE round_number = ? LIMIT 1",
            (round_number,)
        )
        account = cursor.fetchone()
        
        if account:
            login, password = account
            
            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            cursor.execute(
                "DELETE FROM accounts WHERE round_number = ? AND login = ? AND password = ?",
                (round_number, login, password)
            )
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            cursor.execute(
                "UPDATE users SET balance = balance - ? WHERE user_id = ?",
                (price, user_id)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É–ø–ª–µ–Ω–Ω—ã–µ
            cursor.execute(
                "INSERT INTO purchased_accounts (user_id, round_number, login, password) VALUES (?, ?, ?, ?)",
                (user_id, round_number, login, password)
            )
            
            conn.commit()
            
            await callback.message.answer(
                f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                f"<b>–†–∞—É–Ω–¥:</b> {round_number}\n"
                f"<b>–õ–æ–≥–∏–Ω:</b> <code>{login}</code>\n"
                f"<b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>\n\n"
                f"üìå <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"
                f"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: https://clck.ru/3LNTzq\n"
                f"üí¨ –û—Ç–∑—ã–≤: @rusttools_reviews\n"
                f"üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @RustTools_help",
            parse_mode="HTML"
            )
            
            await callback.answer()
        else:
            await callback.answer("–ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
    else:
        shortage = price - balance
        await callback.message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
            f"üíµ –¢–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç: {price} RUB\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB\n"
            f"üîª –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {shortage} RUB\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
            reply_markup=await payment_options(user_id, shortage)
        )
        await callback.answer()

# –û–ø–ª–∞—Ç–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def payment_options(user_id: int, amount_needed: float = None):
    builder = InlineKeyboardBuilder()
    
    if amount_needed:
        builder.button(
            text=f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ {amount_needed} RUB", 
            callback_data=f"topup_{amount_needed}"
        )
    else:
        builder.button(
            text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", 
            callback_data="topup"
        )
    
    builder.button(text="üìä –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_balance")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    builder.adjust(1)
    
    return builder.as_markup()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–∞—É–Ω–¥–æ–≤
async def show_rounds(message: types.Message, edit: bool = False):
    cursor.execute("SELECT round_number, price FROM round_prices ORDER BY round_number")
    rounds = cursor.fetchall()
    
    if not rounds:
        text = "–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤."
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        
        if edit:
            await message.edit_text(text, reply_markup=builder.as_markup())
        else:
            await message.answer(text, reply_markup=builder.as_markup())
        return
    
    builder = InlineKeyboardBuilder()
    
    for round_data in rounds:
        round_number, price = round_data
        builder.button(
            text=f"–†–∞—É–Ω–¥ {round_number} - {price} RUB",
            callback_data=f"round_{round_number}"
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    text = "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—É–Ω–¥—ã Twitch Drops –¥–ª—è Rust:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—É–Ω–¥:"
    
    if edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)
    await on_startup()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
    